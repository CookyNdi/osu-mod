// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
  MODDED
  NOMINATED
  RANKED
}

enum RulesType {
  REQUEST_INFORMATION
  GENRE
  MAP
  MAPPER
  LANGUAGE
  SONG_DETAILS
}

enum NotificationType {
  NEW_REQUEST
  CHANGE_STATUS
}

model Users {
  id                      String         @id
  username                String         @unique
  previous_usernames      String[]
  country                 String
  avatar_url              String
  ranked_beatmapset_count Int            @default(0)
  guest_beatmapset_count  Int            @default(0)
  loved_beatmapset_count  Int            @default(0)
  last_action             DateTime       @default(now())
  createdAt               DateTime       @default(now())
  Settings                Settings[]
  Request                 Request[]
  Rules                   Rules[]
  Notification            Notification[]
}

model Rules {
  id         String    @id @default(cuid())
  userId     String
  type       RulesType
  message    String
  isAccepted Boolean
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id               String   @id @default(cuid())
  userId           String   @unique
  open             Boolean  @default(false)
  queue_limit      Int      @default(10)
  request_cooldown Int      @default(1)
  modes            String[]
  modder_type      String
  user             Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Request {
  id             String         @id @default(cuid())
  requestUserId  String
  targetUserId   String
  beatmapId      Int
  status         STATUS         @default(PENDING)
  mapper_message String
  archived       Boolean        @default(false)
  feedback       String?
  createdAt      DateTime       @default(now())
  user           Users          @relation(fields: [targetUserId], references: [id], onDelete: NoAction)
  beatmap        Beatmaps       @relation(fields: [beatmapId], references: [id], onDelete: Cascade)
  Notification   Notification[]
}

model Beatmaps {
  id             Int              @id
  artist         String
  title          String
  bpm            Int
  length         Int
  cover_url      String
  creator        String
  BeatmapSetDiff BeatmapSetDiff[]
  Request        Request[]
}

model BeatmapSetDiff {
  id                String   @id @default(cuid())
  beatmapId         Int
  difficulty_rating String
  mode              String
  version           String
  beatmaps          Beatmaps @relation(fields: [beatmapId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  requestId String
  isRead    Boolean          @default(false)
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  user      Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  request   Request          @relation(fields: [requestId], references: [id], onDelete: Cascade)
}
